Exam 4 Multiple Choice Questions

- These questions may not be in the same order as what you saw on the exam.
- Your answer is indicated by a '->'

~~~~~~~~~~~~~~~~~~~~~~~~

For a minHeap implementation, assume we use the 0th index of the array
to store the root (instead of index 1). Given an element at position
$i$, what would be the position of its right child (if one exists)?

Choices:
   a. $2i$
-> b. $2i + 2$
   c. None of other options
   d. $2i - 1$
   e. $2i + 1$
Your answer was correct.

~~~~~~~~~~~~~~~~~~~~~~~~

Consider the following disjoint sets.

    \tikz [tree layout, minimum number of children=2, sibling distance=15mm, level distance=11mm,font=\Large,>=latex]
    \graph {
        1 <- {
            0,
            2 <- {
                3,
                4
            }
        },
        7 <- {
            6 <- {
                5,
                8
            }
        }
    };

Using our array implementation of disjoint sets with union-by-size and
path compression, after the operations `Find(3)`,
`Union(Find(4), Find(8))` and `Find(5)`, the resulting array is named
`result`. Which of the following statements is correct? (Hint: in the
array implementation of disjoint sets, keys are implicitly stored in
array indices)

Choices:
   a. None of these are correct
   b. `result[3]` is 2 and `result[7]` is 1
-> c. `result[2]` is 1 and `result[4]` is 2
   d. `result[4]` is 1 and `result[6]` is 7
   e. `result[4]` is 1 and `result[6]` is 1
Your answer was incorrect.

~~~~~~~~~~~~~~~~~~~~~~~~

What is the minimum number of keys that can be stored in a B-Tree of
order 64 and height 5?

Choices:
   a. $2^{25} − 1$
   b. $2^{26} − 1$
-> c. $2^{30} + 1$
   d. $2^{25} + 1$
   e. $2^{30} − 1$
Your answer was incorrect.

~~~~~~~~~~~~~~~~~~~~~~~~

Given the following string of characters:

    a b a a c c d e f f e a a d c e c

which character will possibly have the Huffman code `00`?

Choices:
   a. `b`
-> b. `a`
   c. None of these options can possibly have a Huffman code `00`
   d. `d`
   e. `f`
Your answer was correct.

~~~~~~~~~~~~~~~~~~~~~~~~

Find on a dictionary can return multiple values for a single key.

Choices:
   a. False
-> b. True
Your answer was incorrect.

~~~~~~~~~~~~~~~~~~~~~~~~

There are several factors that affect the efficiency of lookup
operations in a hash table. Which of the following is not one of those
factors?

Choices:
   a. Quality of the hash function
-> b. Size of elements stored in the hash table
   c. Number of buckets in the hash table
   d. Number of elements stored in the hash table
   e. All of these factors affect the efficiency of hash table lookups
Your answer was correct.

~~~~~~~~~~~~~~~~~~~~~~~~

What is the running time to delete an AVL Tree containing $n$ nodes?

Choices:
-> a. $O(n\log n)$
   b. $O(n)$
   c. $O(\log n)$
   d. None of the other answers
   e. $O(1)$
   f. $O(n^2)$
Your answer was incorrect.

~~~~~~~~~~~~~~~~~~~~~~~~

In our uptree disjoint sets implementation, suppose we employ
union-by-size and no path compression. The running times of the relevant
functions are:

Choices:
-> a. None of the other answers
   b. $O(n)$ for `setUnion` and $O(1)$ for `Find`
   c. $O(\log n)$ for `setUnion` and $O(\log n)$ for `Find`
   d. $O(1)$ for `setUnion` and $O(\log n)$ for `Find`
   e. $O(n)$ for `setUnion` and $O(n\log n)$ for `Find`
Your answer was incorrect.

~~~~~~~~~~~~~~~~~~~~~~~~

Choose the runtime for printing the keys in a binary tree (not
necessarily BST) in descending order using Heap Sort. In answering this
question you should assume the best possible implementation given the
constraints, and also assume that every array is sufficiently large to
handle all items (unless otherwise stated). The variable $n$ represents
the number of items.

Choices:
   a. $O(n^2)$
-> b. $O(n\log n)$
   c. $O(n)$
   d. None of the other options
   e. $O(\log n)$
   f. $O(1)$
Your answer was correct.

~~~~~~~~~~~~~~~~~~~~~~~~

Suppose you implement a hash table with separate chaining, where instead
of a linked list, you use an AVL Tree. What is the worst case running
time for inserting 1 element into the hash table of size $n$ if resizing
is set to occur every time any of the binary trees reach a size of $m$
($m$ nodes are present in the binary tree).

Choices:
   a. $O(n)$
   b. $O(n \log m)$
   c. $O(\log m)$
-> d. None of the other options
   e. $O(m + n)$
   f. $O(m)$
Your answer was correct.

~~~~~~~~~~~~~~~~~~~~~~~~

